---
interface Props {
	symbol: string;
	interval: "60m" | "1d" | "1wk";
	weeks: "2" | "13" | "52";
	endDate: string;
}

const { weeks, interval } = Astro.props;
---

<!-- Wrap the component elements in our custom element “candlestick-chart”. -->
<candlestick-chart-live data-props={JSON.stringify(Astro.props)}>
	<h3>{weeks} Weeks - {interval}</h3>
	<div class="candlestick-chart__wrapper"></div>
</candlestick-chart-live>

<style lang="scss">
	@use "../../styles/mixins";

	.candlestick-chart__wrapper {
		width: 100%;
		aspect-ratio: 16/9;
		overflow: hidden;
	}
</style>

<script>
	import { useChart } from "@utils/chart";
	import { mapPriceData, mapVolumeData } from "@utils/map-data.ts";
	import type { PriceData, StudyData } from "@utils/map-data.ts";
	import { formatDate } from "@utils/format";

	// Define the behaviour for our new type of HTML element.
	class CandlestickChartLive extends HTMLElement {
		chartWrapper: HTMLElement | null = null;
		isProd = import.meta.env.PROD;

		async fetchHistory(url: string) {
			const response = await fetch(url);
			const data = await response.json();
			return data;
		}

		async connectedCallback() {
			const chartWrapper = this.querySelector(".candlestick-chart__wrapper");
			const { symbol, interval, weeks } = JSON.parse(this.dataset.props!);
			const date = new Date();
			const dateString = formatDate(date);

			const domain = this.isProd
				? "https://yf-api.vercel.app"
				: "http://localhost:3000";

			const history = await this.fetchHistory(
				`${domain}/api/history?symbol=${symbol}&interval=${interval}&weeks=${weeks}&end=${dateString}`,
			);

			const priceData: PriceData = mapPriceData(history);

			const volumeData: StudyData = mapVolumeData(history);

			const { chart, candlestickSeries, volumeSeries } = useChart(
				chartWrapper as string | HTMLElement,
			);
			candlestickSeries.setData(priceData);
			volumeSeries.setData(volumeData);
			chart.timeScale().fitContent();
		}
	}

	customElements.define("candlestick-chart-live", CandlestickChartLive);
</script>
