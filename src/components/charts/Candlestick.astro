---
interface Props {
	historicalData: string;
}

const { historicalData } = Astro.props;
---

<!-- Wrap the component elements in our custom element “candlestick-chart”. -->
<candlestick-chart data-historical-data={historicalData}>
	<div class="candlestick-chart__wrapper"></div>
</candlestick-chart>

<style lang="scss">
	@use "../../styles/mixins";

	.candlestick-chart__wrapper {
		width: 100%;
		aspect-ratio: 16/9;
		overflow: hidden;
	}
</style>

<script>
	import { useChart } from "@utils/chart";
	import { mapPriceData, mapVolumeData } from "@utils/map-data.ts";
	import type { PriceData, StudyData } from "@utils/map-data.ts";

	// Define the behaviour for our new type of HTML element.
	class CandlestickChart extends HTMLElement {
		constructor() {
			super();

			const priceData: PriceData = mapPriceData(
				JSON.parse(this.dataset.historicalData!),
			);

			const volumeData: StudyData = mapVolumeData(
				JSON.parse(this.dataset.historicalData!),
			);

			const chartWrapper = this.querySelector(".candlestick-chart__wrapper");
			const { chart, candlestickSeries, volumeSeries } = useChart(
				chartWrapper as string | HTMLElement,
			);
			candlestickSeries.setData(priceData);
			volumeSeries.setData(volumeData);
			chart.timeScale().fitContent();
		}
	}

	// Tell the browser to use our CandlestickChart class for <candlestick-chart> elements.
	customElements.define("candlestick-chart", CandlestickChart);
</script>
