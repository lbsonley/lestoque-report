---
import LWatchlist from "~/layouts/LWatchlist.astro";
---

<watchlist-app>
	<LWatchlist
		metaTitle="Watchlist | Lestoque Report"
		metaDescription="Stocks to trade."
	>
		<watchlist-sidebar slot="sidebar"></watchlist-sidebar>
		<watchlist-chart-options slot="options"></watchlist-chart-options>
		<watchlist-chart slot="main"></watchlist-chart>
		<position-sizer slot="position-sizer"></position-sizer>
	</LWatchlist>
</watchlist-app>

<script>
	import "./watchlist-sidebar";
	import "./watchlist-chart";
	import "./watchlist-chart-options";
	import "./position-sizer";
	import state from "@state/watchlist-state";
	import { formatDate } from "@utils/format";

	class WatchlistApp extends HTMLElement {
		sidebarEl: HTMLElement | null = null;
		chartEl: HTMLElement | null = null;
		securities: any[] = [];
		endDate: string = formatDate(new Date());
		weeksMap = {
			"90m": "2",
			"1d": "13",
			"1wk": "52",
			"1mo": "260",
		};

		isProd = import.meta.env.PROD;

		async fetchOutperformers() {
			const domain = this.isProd
				? "https://yf-api.vercel.app"
				: "http://localhost:3000";

			const request = await fetch(
				`${domain}/api/outperformers?end=${this.endDate}&weeks=52`,
			);
			const response = await request.json();
			return response;
		}

		async connectedCallback() {
			this.sidebarEl = this.querySelector("watchlist-sidebar");
			this.chartEl = this.querySelector("watchlist-chart");
			this.optionsEl = this.querySelector("watchlist-chart-options");

			this.securities = await this.fetchOutperformers();

			this.sidebarEl!.setAttribute(
				"securities",
				JSON.stringify(this.securities),
			);

			state.chartOptions$.subscribe((options) => {
				options.symbol && this.chartEl!.setAttribute("symbol", options.symbol);
				if (options.interval) {
					this.chartEl!.setAttribute("interval", options.interval);
					this.chartEl!.setAttribute("weeks", this.weeksMap[options.interval]);
				}
			});
		}
	}

	customElements.define("watchlist-app", WatchlistApp);
</script>
