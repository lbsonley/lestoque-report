---
import LWatchlist from "~/layouts/LWatchlist.astro";

interface Props {
	listName: string;
}

const { listName } = Astro.props;
---

<watchlist-app list-name={listName}>
	<LWatchlist
		metaTitle="Watchlist | Lestoque Report"
		metaDescription="Stocks to trade."
	>
		<watchlist-sidebar slot="sidebar"></watchlist-sidebar>
		<watchlist-chart-options slot="options"></watchlist-chart-options>
		<watchlist-chart slot="main"></watchlist-chart>
		<position-sizer slot="position-sizer"></position-sizer>
	</LWatchlist>
</watchlist-app>

<script>
	import "./watchlist-sidebar";
	import "./watchlist-chart";
	import "./watchlist-chart-options";
	import "./position-sizer";
	import state from "@state/watchlist-state";
	import { formatDate } from "@utils/format";

	class WatchlistApp extends HTMLElement {
		sidebarEl: HTMLElement | null = null;
		chartEl: HTMLElement | null = null;
		optionsEl: HTMLElement | null = null;
		listName: string | null = null;
		securities: any[] = [];
		startDate: Date = new Date();
		endDate: Date = new Date();
		startDateMap = {
			// 2 weeks ago
			"90m": formatDate(
				new Date(this.startDate.setDate(this.endDate.getDate() - 7 * 2)),
			),
			// 13 weeks ago
			"1d": formatDate(
				new Date(this.startDate.setDate(this.endDate.getDate() - 7 * 13)),
			),
			// 52 weeks ago
			"1wk": formatDate(
				new Date(this.startDate.setDate(this.endDate.getDate() - 7 * 52)),
			),
			// 260 weeks (5y) ago
			"1mo": formatDate(
				new Date(this.startDate.setDate(this.endDate.getDate() - 7 * 260)),
			),
		};

		constructor() {
			super();
			// push date one day forward so we get current day prices
			this.endDate.setDate(this.endDate.getDate() + 1);
		}

		static observedAttributes = ["list-name"];

		isProd = import.meta.env.PROD;

		async fetchList() {
			const domain = this.isProd
				? "https://yf-api.vercel.app"
				: "http://localhost:8000";

			const request = await fetch(`${domain}/api/${this.listName}`);
			const response = await request.json();
			return response.items;
		}

		async connectedCallback() {
			this.sidebarEl = this.querySelector("watchlist-sidebar");
			this.chartEl = this.querySelector("watchlist-chart");
			this.optionsEl = this.querySelector("watchlist-chart-options");

			this.securities = await this.fetchList();

			this.sidebarEl!.setAttribute(
				"securities",
				JSON.stringify(this.securities),
			);

			state.chartOptions$.subscribe((options) => {
				options.symbol && this.chartEl!.setAttribute("symbol", options.symbol);
				if (options.interval) {
					this.chartEl!.setAttribute("interval", options.interval);
					this.chartEl!.setAttribute(
						"start",
						this.startDateMap[options.interval],
					);
					this.chartEl!.setAttribute("end", formatDate(this.endDate));
				}
			});
		}

		attributeChangedCallback(
			name: "list-name",
			oldValue: string,
			newValue: string,
		) {
			this.listName = newValue;
		}
	}

	customElements.define("watchlist-app", WatchlistApp);
</script>
